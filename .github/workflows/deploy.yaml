---
name: "Deploy"

on:
  push:
    branches:
      - main
  pull_request:
    paths:
      - "deploy/**"

permissions:
  pull-requests: write

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v6
        with:
          python-version: 3.x
      - name: Install environment
        env:
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          curl -L https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64 > jq
          chmod +x jq
          pip install yq ansible fedcloudclient
          echo "$PWD" >> "$GITHUB_PATH"
          # add OIDC access token to ENV
          # using parametric scopes to only have access to cloud.egi.eu VO
          SCOPE="openid%20email%20profile%20voperson_id%20eduperson_entitlement"
          OIDC_TOKEN=$(curl -X POST "https://aai.egi.eu/auth/realms/egi/protocol/openid-connect/token" \
                            -d "grant_type=refresh_token&client_id=token-portal&scope=$SCOPE&refresh_token=$REFRESH_TOKEN" \
                          | jq -r ".access_token")
          echo "::add-mask::$OIDC_TOKEN"
          echo "OIDC_TOKEN=$OIDC_TOKEN" >> "$GITHUB_ENV"
      - name: Configure providers access
        run: |
          cd deploy
          ./site-config.sh
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.9
      - name: Terraform Format
        id: fmt
        run: |
          cd deploy
          terraform fmt -check
      - name: Terraform init
        id: init
        run: |
          cd deploy
          terraform init
      - name: terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          cd deploy
          terraform plan -no-color -var-file=deploy.tfvars
        continue-on-error: true
      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd deploy
          terraform apply -auto-approve -var-file=deploy.tfvars
      - name: Get IP
        id: public_ip
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd deploy
          terraform output -raw public_ip
      - name: Update IP in DNS
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          NSUPDATE_SECRET: ${{ secrets.NSUPDATE_SECRET }}
        run: |
          curl -u "is.ops.fedcloud.eu:$NSUPDATE_SECRET" \
               "https://nsupdate.fedcloud.eu/nic/update?myip=${{ steps.public_ip.outputs.stdout }}"
      - name: Configure with ansible
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd deploy
          ansible-galaxy install -r galaxy-requirements.yaml
          echo "${{ secrets.CLOUDS_YAML }}" > clouds.yaml
          echo "${{ secrets.SSH_KEY }}" > ansible_key
          cat << EOF > inventory
          [all]
          ${{ steps.public_ip.outputs.stdout }}
          EOF
          chmod 600 ansible_key
          ansible-playbook -i  inventory \
            --extra-vars ACCESS_TOKEN="${{ env.OIDC_TOKEN }}" \
            --extra-vars ops_portal_token="${{ secrets.OPS_PORTAL_TOKEN }}" \
            --extra-vars git_ref="${{ github.sha }}" \
            --ssh-common-args="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            -u egi --key-file ansible_key \
            playbook.yaml
